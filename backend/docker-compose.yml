# docker-compose.yml (Seoro-town 루트 폴더에)
version: '3.8'

services:
  backend:
    build: 
      context: ./backend # backend 폴더에서 Dockerfile 찾음
      dockerfile: Dockerfile
    ports:
      - "3001:3001" # 호스트의 3001번 포트를 컨테이너의 3001번 포트에 연결
    # .env 파일을 컨테이너에 전달 (DB 연결 정보 포함)
    env_file:
      - ./backend/.env
    # MongoDB 서비스에 의존성을 가짐 (MongoDB가 먼저 시작되어야 백엔드가 시작됨)
    depends_on:
      - mongodb
    # 컨테이너 내부에서 MongoDB 서비스에 접근할 주소 설정
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/seorotown # 'mongodb'는 services에 정의된 DB 서비스 이름

  frontend:
    build:
      context: ./my-app # my-app 폴더에서 Dockerfile 찾음
      dockerfile: Dockerfile
    ports:
      - "3000:80" # 호스트의 3000번 포트를 컨테이너의 80번 포트(Nginx)에 연결
    depends_on:
      - backend # 백엔드 서비스에 의존성을 가짐

  mongodb: # ✨ MongoDB 서비스 정의
    image: mongo:latest # 최신 MongoDB 공식 이미지 사용
    container_name: seorotown_mongodb # 이 컨테이너의 이름을 지정 (선택 사항)
    ports:
      - "27017:27017" # MongoDB 기본 포트 27017을 호스트에 노출 (로컬에서 Compass 등으로 접근 가능)
    volumes:
      - mongodb_data:/data/db # MongoDB 데이터 지속성을 위한 볼륨 마운트
                               # 호스트의 'mongodb_data'라는 이름의 Docker 볼륨에 실제 데이터가 저장됨

volumes:
  mongodb_data: # 'mongodb_data'라는 이름의 Docker 볼륨을 정의 (위에서 사용됨)